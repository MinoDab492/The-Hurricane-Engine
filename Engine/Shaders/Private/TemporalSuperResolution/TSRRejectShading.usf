// Copyright Epic Games, Inc. All Rights Reserved.

//------------------------------------------------------- CONFIG WAVE SIZE

// needed if CONFIG_OPTIMIZED_LDS_ACCESS == 0 for ConvertWaveBroadcastToLDS()
//#if DIM_WAVE_SIZE == 0 // fallback to LDS
//	#define WAVE_BROADCAST_GROUPSIZE (16 * 16)
//#endif

//------------------------------------------------------- INCLUDES

#include "TSRCommon.ush"
#include "/Engine/Public/LaneVectorization.ush"


//------------------------------------------------------- CONFIG

#define DEBUG_ARRAY_SIZE 8

/** Size of the entire group loaded into memory including overscan. */
#define GROUP_TILE_SIZE 16

/** Size of the overscan. */
#define TILE_OVERSCAN_PADDING 2

/** Size of of the output tile. */
#define TILE_SIZE (GROUP_TILE_SIZE - 2 * TILE_OVERSCAN_PADDING)

/** Whether should remove firefliers from input and history before comparison to improve stability. */
#define CONFIG_FIREFLY_REMOVAL 1

/** Whether to compose translucency to the input. */
#define CONFIG_COMPOSE_TRANSLUCENCY 1

/** Whether to detect flickering. */
#define CONFIG_MOIRE_DETECTION (DIM_FLICKERING_DETECTION)

#if DIM_WAVE_SIZE == 0
	#define CONFIG_OPTIMIZED_LDS_ACCESS 1
#else
	#define CONFIG_OPTIMIZED_LDS_ACCESS 0
#endif

//------------------------------------------------------- DERIVED

/** Pixel coordinate stride between each lane in the GROUP_TILE_SIZE. */
#if DIM_WAVE_SIZE == 64
	#define LANE_COUNT 64
	#define LANE_STRIDE_X 2
	#define LANE_STRIDE_Y 2

#elif DIM_WAVE_SIZE == 32
	#define LANE_COUNT 32
	#define LANE_STRIDE_X 4
	#define LANE_STRIDE_Y 2

#elif DIM_WAVE_SIZE == 0 && 0
	#define LANE_COUNT 32
	#define LANE_STRIDE_X 4
	#define LANE_STRIDE_Y 2

#elif DIM_WAVE_SIZE == 0 && 1
	#define LANE_COUNT (GROUP_TILE_SIZE * GROUP_TILE_SIZE)
	#define LANE_STRIDE_X 1
	#define LANE_STRIDE_Y 1

#else
	#error Unknown wave size
#endif

/** Number of lane the GROUP_TILE_SIZE. */
#define LANE_COUNT_X (GROUP_TILE_SIZE / LANE_STRIDE_X)
#define LANE_COUNT_Y (GROUP_TILE_SIZE / LANE_STRIDE_Y)

/** Size of the SIMD per lane that also number of input pixel loaded into each individual lanes. */
#define SIMD_SIZE (LANE_STRIDE_X * LANE_STRIDE_Y)


//------------------------------------------------------- TYPEDEFS

#define tsr_simd_half  TLaneVector<tsr_half, 1, SIMD_SIZE>
#define tsr_simd_half4 TLaneVector<tsr_half, 4, SIMD_SIZE>
#define tsr_simd_halfC TLaneVector<tsr_half, CONFIG_CHANNEL_COUNT, SIMD_SIZE>
#define tsr_simd_bool  TLaneVector<bool, 1, SIMD_SIZE>


//------------------------------------------------------- PARAMETERS

FScreenTransform InputPixelPosToTranslucencyTextureUV;
float2 TranslucencyTextureUVMin;
float2 TranslucencyTextureUVMax;
float3 HistoryGuideQuantizationError;
float FlickeringFramePeriod;

Texture2D<tsr_halfC> InputTexture;
Texture2D<tsr_half4> InputSceneTranslucencyTexture;
Texture2D<tsr_halfC> ReprojectedHistoryGuideTexture;
Texture2D<tsr_half4> ReprojectedHistoryMoireTexture;
Texture2D<tsr_half> ParallaxRejectionMaskTexture;
Texture2D<tsr_ushort> IsMovingMaskTexture;

RWTexture2D<tsr_halfC> HistoryGuideOutput;
RWTexture2D<tsr_half4> HistoryMoireOutput;
RWTexture2D<tsr_half> HistoryRejectionOutput;
RWTexture2D<tsr_half> InputSceneColorLdrLumaOutput;


//------------------------------------------------------- GENERAL TEXEL SWIZZLING & NEIGHBOR ACCESS

CALL_SITE_DEBUGLOC
tsr_short2 GetSimdIndexPixelCoordinateInLane(const uint SimdIndex)
{
	return tsr_short2(SimdIndex % uint(LANE_STRIDE_X), SimdIndex / uint(LANE_STRIDE_X));
}

CALL_SITE_DEBUGLOC
tsr_short2 GetLaneSimdPixelOffset(const uint LaneIndex, const uint SimdIndex)
{
	return (
		tsr_short2(LaneIndex % uint(LANE_COUNT_X), LaneIndex / uint(LANE_COUNT_X)) * tsr_short2(LANE_STRIDE_X, LANE_STRIDE_Y) +
		GetSimdIndexPixelCoordinateInLane(SimdIndex)
	);
}


//------------------------------------------------------- GENERAL TEXEL SWIZZLING & NEIGHBOR ACCESS

#if CONFIG_OPTIMIZED_LDS_ACCESS

groupshared tsr_half4 SharedData[GROUP_TILE_SIZE * GROUP_TILE_SIZE];

void WriteAllElementToLDS(uint GroupThreadIndex, TLaneVector<tsr_half, 1, SIMD_SIZE> X)
{
	GroupMemoryBarrierWithGroupSync();
	UNROLL_N(SIMD_SIZE)
	for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
	{
		SharedData[GroupThreadIndex + SimdIndex * LANE_COUNT] = tsr_half4(X.GetElement(SimdIndex), 0.0, 0.0, 0.0);
	}
	GroupMemoryBarrierWithGroupSync();
}

void WriteAllElementToLDS(uint GroupThreadIndex, TLaneVector<tsr_half, 3, SIMD_SIZE> X)
{
	GroupMemoryBarrierWithGroupSync();
	UNROLL_N(SIMD_SIZE)
	for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
	{
		SharedData[GroupThreadIndex + SimdIndex * LANE_COUNT] = tsr_half4(X.GetElement(SimdIndex), 0.0);
	}
	GroupMemoryBarrierWithGroupSync();
}

void WriteAllElementToLDS(uint GroupThreadIndex, TLaneVector<tsr_half, 4, SIMD_SIZE> X)
{
	GroupMemoryBarrierWithGroupSync();
	UNROLL_N(SIMD_SIZE)
	for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
	{
		SharedData[GroupThreadIndex + SimdIndex * LANE_COUNT] = tsr_half4(X.GetElement(SimdIndex));
	}
	GroupMemoryBarrierWithGroupSync();
}

uint GetElementLDSIndex(uint GroupThreadIndex, const uint NeigborSimdIndex, const uint LaneRotation)
{
	return ((GroupThreadIndex + LaneRotation) % uint(LANE_COUNT)) + NeigborSimdIndex * LANE_COUNT;
}

void ReadElementFromLDS(uint GroupThreadIndex, const uint NeigborSimdIndex, const uint LaneRotation, out tsr_half X)
{
	X = SharedData[GetElementLDSIndex(GroupThreadIndex, NeigborSimdIndex, LaneRotation)].x;
}

void ReadElementFromLDS(uint GroupThreadIndex, const uint NeigborSimdIndex, const uint LaneRotation, out tsr_half3 X)
{
	X = SharedData[GetElementLDSIndex(GroupThreadIndex, NeigborSimdIndex, LaneRotation)].xyz;
}

void ReadElementFromLDS(uint GroupThreadIndex, const uint NeigborSimdIndex, const uint LaneRotation, out tsr_half4 X)
{
	X = SharedData[GetElementLDSIndex(GroupThreadIndex, NeigborSimdIndex, LaneRotation)].xyzw;
}

template<typename ScalarType, uint VectorSize, uint SimdSize>
void WriteToLDSForAccessNeighborTexel(TLaneVector<ScalarType, VectorSize, SimdSize> Input, uint GroupThreadIndex)
{
	WriteAllElementToLDS(GroupThreadIndex, Input);
}

#else // !CONFIG_OPTIMIZED_LDS_ACCESS

template<typename ScalarType, uint VectorSize, uint SimdSize>
void WriteToLDSForAccessNeighborTexel(TLaneVector<ScalarType, VectorSize, SimdSize> Input, uint GroupThreadIndex)
{
	// NOP
}

#endif // !CONFIG_OPTIMIZED_LDS_ACCESS


CALL_SITE_DEBUGLOC
template<typename ScalarType, uint VectorSize, uint SimdSize>
TLaneVector<ScalarType, VectorSize, SimdSize> AccessNeighborTexel(TLaneVector<ScalarType, VectorSize, SimdSize> Input, const tsr_short2 Offset, uint GroupThreadIndex)
{
	TLaneVector<ScalarType, VectorSize, SimdSize> Return;
	
	UNROLL_N(SIMD_SIZE)
	for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
	{
		const uint2 SimdPixelCoord = uint2(GetSimdIndexPixelCoordinateInLane(SimdIndex));

		// Compute the simd index of the neighbor.
		const uint2 NeigborSimdPixelCoord = (SimdPixelCoord + uint2(Offset)) % uint2(LANE_STRIDE_X, LANE_STRIDE_Y);
		const uint NeigborSimdIndex = dot(NeigborSimdPixelCoord, uint2(1, LANE_STRIDE_X));

		// Compute the lane rotaton of the neighbor.
		const bool2 bNeedsLaneRotation = (SimdPixelCoord + uint2(Offset)) >= uint2(LANE_STRIDE_X, LANE_STRIDE_Y);
		const int LaneRotation = dot(select(bNeedsLaneRotation, int2(Offset), 0), int2(1, LANE_COUNT_X));
		
		// Access the lement.
		vector<ScalarType, VectorSize> SimdElement = Input.GetElement(NeigborSimdIndex);
		vector<ScalarType, VectorSize> ReturnSimdElement = SimdElement;
		if (LaneRotation != 0)
		#if CONFIG_OPTIMIZED_LDS_ACCESS
		{
			ReadElementFromLDS(GroupThreadIndex, NeigborSimdIndex, LaneRotation, /* out */ ReturnSimdElement);
		}
		#else
		{
			// Only uses wave intrinsics on platforms that provides RDNA's ds_swizzle because we know the wave size of this platforms. 
			#if DIM_WAVE_SIZE != 0
				#if !PLATFORM_SUPPORTS_WAVE_ROTATE
					//#error InitWaveRotateLaneGroup() isn't supported.
				#endif
				const FWaveBroadcastSettings BroadcastSettings = InitWaveRotateLaneGroup(/* LaneGroupSize = */ LANE_COUNT, LaneRotation);
			#else
				const FWaveBroadcastSettings BroadcastSettings = ConvertWaveBroadcastToLDS(InitWaveRotateLaneGroup(/* LaneGroupSize = */ LANE_COUNT, LaneRotation), GroupThreadIndex);
			#endif
			ReturnSimdElement = WaveBroadcast(BroadcastSettings, SimdElement);
		}
		#endif

		Return.SetElement(SimdIndex, ReturnSimdElement);
	}

	return Return;
}


//------------------------------------------------------- CONVOLUTION ACCUMULATORS

template<typename Type>
struct TAccumulatorAvg
{
	Type Value;
	tsr_simd_half Weight;
	
	CALL_SITE_DEBUGLOC
	static bool NeedWeightInAccumulate()
	{
		return true;
	}

	CALL_SITE_DEBUGLOC
	void Start(Type CenterSample)
	{
		Value = CenterSample;
		Weight = tsr_simd_half::Const(1.0);
	}
	
	CALL_SITE_DEBUGLOC
	static Type PreprocessNeighborSample(Type Sample, tsr_simd_half InWeight)
	{
		return Sample;
	}
	
	CALL_SITE_DEBUGLOC
	void Accumulate(const tsr_short2 Offset, Type Sample, tsr_simd_half InWeight)
	{
		const tsr_half SampleSpatialWeight = tsr_half(rcp(abs(tsr_half(Offset.x)) + 1.0) * rcp(abs(tsr_half(Offset.y)) + 1.0));
		
		Value = Value + Sample * Type::Vectorize(InWeight * SampleSpatialWeight);
		Weight = Weight + InWeight * tsr_simd_half::Const(SampleSpatialWeight);
	}
	
	CALL_SITE_DEBUGLOC
	void Finish(const uint SampleCount)
	{
		Value = Value * Type::Vectorize(rcp(Weight));
	}
};

template<typename Type>
struct TAccumulatorMin
{
	Type Value;
	
	CALL_SITE_DEBUGLOC
	static bool NeedWeightInAccumulate()
	{
		return false;
	}

	CALL_SITE_DEBUGLOC
	void Start(Type CenterSample)
	{
		Value = CenterSample;
	}
	
	CALL_SITE_DEBUGLOC
	static Type PreprocessNeighborSample(Type Sample, tsr_simd_half InWeight)
	{
		return Sample;
	}
	
	CALL_SITE_DEBUGLOC
	void Accumulate(const tsr_short2 Offset, Type Sample, tsr_simd_half Weight)
	{
		Value = min(Value, Sample);
	}
	
	CALL_SITE_DEBUGLOC
	void Finish(const uint SampleCount)
	{
		// NOP
	}
};

template<typename Type>
struct TAccumulatorMax
{
	Type Value;
	
	CALL_SITE_DEBUGLOC
	static bool NeedWeightInAccumulate()
	{
		return false;
	}

	CALL_SITE_DEBUGLOC
	void Start(Type CenterSample)
	{
		Value = CenterSample;
	}
	
	CALL_SITE_DEBUGLOC
	static Type PreprocessNeighborSample(Type Sample, tsr_simd_half InWeight)
	{
		return Sample;
	}
	
	CALL_SITE_DEBUGLOC
	void Accumulate(const tsr_short2 Offset, Type Sample, tsr_simd_half Weight)
	{
		Value = max(Value, Sample);
	}
	
	CALL_SITE_DEBUGLOC
	void Finish(const uint SampleCount)
	{
		// NOP
	}
};


//------------------------------------------------------- CONVOLUTIONS

CALL_SITE_DEBUGLOC
template<class FAccumulator, typename FSampleType>
FAccumulator Convole3x1(FSampleType Color, tsr_simd_half Weight, const tsr_short2 Offset, uint GroupThreadIndex)
#if CONFIG_OPTIMIZED_LDS_ACCESS
{
	const tsr_short2 OffsetN = tsr_short2(-int2(Offset)); // work arround a shader compiler bug
	
	FSampleType PreprocessedNeighborColor = FAccumulator::PreprocessNeighborSample(Color, Weight);

	WriteToLDSForAccessNeighborTexel(PreprocessedNeighborColor, GroupThreadIndex);
	FSampleType Sample0 = AccessNeighborTexel(PreprocessedNeighborColor, Offset, GroupThreadIndex);
	FSampleType Sample1 = AccessNeighborTexel(PreprocessedNeighborColor, OffsetN, GroupThreadIndex);
	
	tsr_simd_half Weight0 = tsr_simd_half::Const(tsr_half(1.0));
	tsr_simd_half Weight1 = tsr_simd_half::Const(tsr_half(1.0));
	if (FAccumulator::NeedWeightInAccumulate())
	{
		WriteToLDSForAccessNeighborTexel(Weight, GroupThreadIndex);
		Weight0 = AccessNeighborTexel(Weight, Offset, GroupThreadIndex);
		Weight1 = AccessNeighborTexel(Weight, OffsetN, GroupThreadIndex);
	}
	
	FAccumulator Accumulator;
	Accumulator.Start(Color);
	Accumulator.Accumulate(+Offset, Sample0, Weight0);
	Accumulator.Accumulate(OffsetN, Sample1, Weight1);
	Accumulator.Finish(3);
	return Accumulator;
}
#else // !CONFIG_OPTIMIZED_LDS_ACCESS
{
	FAccumulator Accumulator;
	Accumulator.Start(Color);
	
	FSampleType PreprocessedNeighborColor = FAccumulator::PreprocessNeighborSample(Color, Weight);

	FSampleType Sample0 = AccessNeighborTexel(PreprocessedNeighborColor, Offset, GroupThreadIndex);
	tsr_simd_half Weight0 = tsr_simd_half::Const(tsr_half(1.0));
	if (FAccumulator::NeedWeightInAccumulate())
	{
		Weight0 = AccessNeighborTexel(Weight, Offset, GroupThreadIndex);
	}
	Accumulator.Accumulate(+Offset, Sample0, Weight0);
	
	const tsr_short2 OffsetN = tsr_short2(-int2(Offset)); // work arround a shader compiler bug
	FSampleType Sample1 = AccessNeighborTexel(PreprocessedNeighborColor, OffsetN, GroupThreadIndex);
	tsr_simd_half Weight1 = tsr_simd_half::Const(tsr_half(1.0));
	if (FAccumulator::NeedWeightInAccumulate())
	{
		Weight1 = AccessNeighborTexel(Weight, OffsetN, GroupThreadIndex);
	}
	Accumulator.Accumulate(OffsetN, Sample1, Weight1);

	Accumulator.Finish(3);
	return Accumulator;
}
#endif // !CONFIG_OPTIMIZED_LDS_ACCESS

CALL_SITE_DEBUGLOC
template<class FAccumulator, typename FSampleType>
FSampleType Convolve3x3HV(FSampleType Color, tsr_simd_half Weight, uint GroupThreadIndex)
{
	FSampleType HorizontalColor = Convole3x1<FAccumulator, FSampleType>(Color, Weight, tsr_short2(1, 0), GroupThreadIndex).Value;
	return Convole3x1<FAccumulator, FSampleType>(HorizontalColor, Weight, tsr_short2(0, 1), GroupThreadIndex).Value;
}


//------------------------------------------------------- GENERAL OPERATIONS

tsr_simd_halfC ClampFireFliersWithGuide(tsr_simd_halfC ToClamp, tsr_simd_halfC Guide, tsr_simd_half Weight, uint GroupThreadIndex)
{
	tsr_simd_halfC ToClampMin = Convolve3x3HV<TAccumulatorMin<tsr_simd_halfC>, tsr_simd_halfC>(ToClamp, Weight, GroupThreadIndex);
	tsr_simd_halfC ToClampMax = Convolve3x3HV<TAccumulatorMax<tsr_simd_halfC>, tsr_simd_halfC>(ToClamp, Weight, GroupThreadIndex);

	tsr_simd_halfC ClampedGuide = clamp(Guide, ToClampMin, ToClampMax);
	
	tsr_simd_halfC ClampedGuideMin = Convolve3x3HV<TAccumulatorMin<tsr_simd_halfC>, tsr_simd_halfC>(ClampedGuide, Weight, GroupThreadIndex);
	tsr_simd_halfC ClampedGuideMax = Convolve3x3HV<TAccumulatorMax<tsr_simd_halfC>, tsr_simd_halfC>(ClampedGuide, Weight, GroupThreadIndex);
	
	return clamp(ToClamp, ClampedGuideMin, ClampedGuideMax);
}


//------------------------------------------------------- ENTRY POINT

#if COMPILER_SUPPORTS_WAVE_SIZE && DIM_WAVE_SIZE > 0
	WAVESIZE(LANE_COUNT)
#endif
[numthreads(LANE_COUNT, 1, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	tsr_simd_halfC Debug[DEBUG_ARRAY_SIZE];
	UNROLL_N(DEBUG_ARRAY_SIZE)
	for (uint DebugId = 0; DebugId < DEBUG_ARRAY_SIZE; DebugId++)
	{
		Debug[DebugId].SetAllElements(0.0);
	}

	const uint LaneIndex = GroupThreadIndex;
	const tsr_short2 GroupPixelOffset = (
		tsr_short2(InputPixelPosMin) +
		tsr_short2(GroupId) * tsr_short2(TILE_SIZE, TILE_SIZE) +
		tsr_short(-TILE_OVERSCAN_PADDING).xx);
		
	// Load
	tsr_simd_halfC OriginalOpaqueInput;
	#if CONFIG_COMPOSE_TRANSLUCENCY
		tsr_simd_half4 OriginalTranslucencyInput;
	#endif
	tsr_simd_halfC OriginalHistory;
	tsr_simd_half bIsValid;
	#if CONFIG_MOIRE_DETECTION
		tsr_simd_half4 PrevMoire;
		tsr_simd_half bIsStatic;
	#endif
	ISOLATE
	{
		UNROLL_N(SIMD_SIZE)
		for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
		{
			tsr_short2 ClampedFetchPixelPos = GroupPixelOffset + GetLaneSimdPixelOffset(LaneIndex, SimdIndex);
			float2 TranslucencyTextureUV = ApplyScreenTransform(float2(ClampedFetchPixelPos), InputPixelPosToTranslucencyTextureUV);

			ClampedFetchPixelPos = ClampPixelOffset(ClampedFetchPixelPos, InputPixelPosMin, InputPixelPosMax);
			TranslucencyTextureUV = clamp(TranslucencyTextureUV, TranslucencyTextureUVMin, TranslucencyTextureUVMax);

			OriginalOpaqueInput.SetElement(SimdIndex, InputTexture[ClampedFetchPixelPos]);
			#if CONFIG_COMPOSE_TRANSLUCENCY
				OriginalTranslucencyInput.SetElement(SimdIndex, InputSceneTranslucencyTexture.SampleLevel(GlobalBilinearClampedSampler, TranslucencyTextureUV, 0));
			#endif
			OriginalHistory.SetElement(SimdIndex, ReprojectedHistoryGuideTexture[ClampedFetchPixelPos]);
			bIsValid.SetElement(SimdIndex, ParallaxRejectionMaskTexture[ClampedFetchPixelPos] > tsr_half(PARALLAX_REJECTION_MASK_THRESHOLD) ? tsr_half(1.0) : tsr_half(0.0));
			#if CONFIG_MOIRE_DETECTION
				PrevMoire.SetElement(SimdIndex, ReprojectedHistoryMoireTexture[ClampedFetchPixelPos]);
				bIsStatic.SetElement(SimdIndex, tsr_half(1.0) - tsr_half(IsMovingMaskTexture[ClampedFetchPixelPos]) * rcp(tsr_half(255.0)));
			#endif
		}
	}
	
	// Compute AA Luma
	tsr_simd_half CenterLumaLDR;
	{
		const tsr_half SpatialAAExposure = tsr_half(0.5);
		UNROLL_N(SIMD_SIZE)
		for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
		{
			tsr_half3 Color = OriginalOpaqueInput.GetElement(SimdIndex).rgb;
			
			#if CONFIG_COMPOSE_TRANSLUCENCY
				tsr_half4 Translucency = OriginalTranslucencyInput.GetElement(SimdIndex);
				Color.rgb = Color.rgb * Translucency.a + Translucency.rgb;
			#endif

			tsr_half CenterLuma = dot(Color, tsr_half3(0.299f, 0.587f, 0.114f));
			CenterLumaLDR.SetElement(SimdIndex, CenterLuma / (SpatialAAExposure + CenterLuma));
		}
	}
	
	tsr_simd_halfC OriginalInput = OriginalOpaqueInput;

	#if CONFIG_COMPOSE_TRANSLUCENCY
	{
		tsr_simd_half4 FilteredTranslucencyInput = Convolve3x3HV<TAccumulatorAvg<tsr_simd_half4>, tsr_simd_half4>(OriginalTranslucencyInput, bIsValid, GroupThreadIndex);

		UNROLL_N(SIMD_SIZE)
		for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
		{
			tsr_halfC Color = OriginalOpaqueInput.GetElement(SimdIndex);
			tsr_half4 Translucency = FilteredTranslucencyInput.GetElement(SimdIndex);

			Color.rgb = Color.rgb * Translucency.a + Translucency.rgb;
			#if CONFIG_SCENE_COLOR_APLHA
				Color.a *= Translucency.a;
			#endif 

			OriginalInput.SetElement(SimdIndex, Color);
		}
	}
	#endif
	
	#if POST_PROCESS_ALPHA
		OriginalInput = min(OriginalInput, tsr_simd_halfC::Const(LargestSceneColorRGBA));
	#else
		OriginalInput = min(OriginalInput, tsr_simd_halfC::Const(LargestSceneColorRGB));
	#endif

	// Convert input to LDR
	OriginalOpaqueInput = OriginalOpaqueInput * rcp(OriginalOpaqueInput + tsr_simd_halfC::Const(1.0));
	OriginalInput = OriginalInput * rcp(OriginalInput + tsr_simd_halfC::Const(1.0));
	
	// Analyses the moire pattern overtime.
	#if CONFIG_MOIRE_DETECTION
	const tsr_half MoireLumaToChannel = tsr_half(3.0);

	tsr_simd_half4 FinalMoire = tsr_simd_half4::Const(0.0);
	tsr_simd_half MoireError = tsr_simd_half::Const(0.0);
	{
		const tsr_half BlendFinal = tsr_half(0.05);
		const tsr_half MoireEncodingError = tsr_half(rcp(127.0));
		const tsr_half MaxPrevTotalVariationCount = tsr_half(20.0);

		// Compute the threshold at which the variation count should quick in
		const tsr_half TotalVariationCountThreshold = tsr_half(1.0 / (1.0 - pow(1.0 - BlendFinal, tsr_half(FlickeringFramePeriod))));


		tsr_simd_half InputLuma;
		{
			UNROLL_N(SIMD_SIZE)
			for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
			{
				const tsr_half3 LumaWeights = rcp(MoireLumaToChannel.xxx);
				
				InputLuma.SetElement(SimdIndex, dot(OriginalOpaqueInput.GetElement(SimdIndex).rgb, LumaWeights));
			}
		}
		
		// Convolve the input luma to have the exact same moire pattern as FilteredInput below.
		InputLuma = Convolve3x3HV<TAccumulatorAvg<tsr_simd_half>, tsr_simd_half>(InputLuma, bIsValid, GroupThreadIndex);

		// Unpack history
		tsr_simd_half PrevFlickeringHistory = PrevMoire[0];
		tsr_simd_half PrevGradient = PrevMoire[1] * tsr_half(255.0 / 127.0) - tsr_half(1.0);
		//tsr_simd_half PrevTotalVariation = PrevMoire[2] * tsr_simd_half::Const(1.0 - BlendFinal);
		tsr_simd_half PrevTotalVariation = PrevMoire[2] * tsr_simd_half::Const(tsr_half(1.0) - BlendFinal);
		tsr_simd_half PrevTotalVariationCount = PrevMoire[3] * MaxPrevTotalVariationCount * tsr_simd_half::Const(tsr_half(1.0) - BlendFinal);
		
		// Discard history on moving objects.
		PrevTotalVariation = PrevTotalVariation * bIsStatic;
		PrevTotalVariationCount = PrevTotalVariationCount * bIsStatic;


		// Compute clamping box of the limance.
		tsr_simd_half InputLumaMin = Convolve3x3HV<TAccumulatorMin<tsr_simd_half>, tsr_simd_half>(InputLuma, bIsValid, GroupThreadIndex);
		tsr_simd_half InputLumaMax = Convolve3x3HV<TAccumulatorMax<tsr_simd_half>, tsr_simd_half>(InputLuma, bIsValid, GroupThreadIndex);

		// Clamp and contribue the history.		
		tsr_simd_half ClampedPrevFlickeringHistory = clamp(PrevFlickeringHistory, InputLumaMin, InputLumaMax);
		tsr_simd_half FinalFlickeringHistory = InputLuma * tsr_simd_half::Const(BlendFinal) - ClampedPrevFlickeringHistory * tsr_simd_half::Const(BlendFinal - tsr_half(1.0));
	
		// Measure the flickering gradient of the current frame.
		//tsr_simd_half CurrentGradient = FinalFlickeringHistory - PrevFlickeringHistory;
		tsr_simd_half CurrentGradient = ClampedPrevFlickeringHistory - PrevFlickeringHistory;
		
		#if 0
			tsr_simd_half InputBoxSize = InputLumaMax - InputLumaMin;
			CurrentGradient = sign(CurrentGradient) * max(abs(CurrentGradient) - tsr_simd_half::Const(0.5) * InputBoxSize, tsr_simd_half::Const(0.0));
		#endif

		tsr_simd_half IsFlicker;
		UNROLL_N(SIMD_SIZE)
		for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
		{
			tsr_half LocalCurrentGradient = CurrentGradient.GetElement(SimdIndex);
			tsr_half LocalPrevGradient = PrevGradient.GetElement(SimdIndex);

			bool bGradientsAreSameSign = LocalCurrentGradient * LocalPrevGradient > tsr_half(0.0);
			bool bGradientsAreWithinError = abs(LocalCurrentGradient) < MoireEncodingError || abs(LocalPrevGradient) < MoireEncodingError;
			//bool bCurrentGradientSubstentialEnough = abs(LocalCurrentGradient) > View.GeneralPurposeTweak * abs(LocalPrevGradient); // - 2.0 * MoireEncodingError;

			tsr_half LocalIsFlicker = select((
				bGradientsAreSameSign ||
				bGradientsAreWithinError ||
				//!bCurrentGradientSubstentialEnough ||
				bCameraCut), tsr_half(0.0), tsr_half(1.0));

			IsFlicker.SetElement(SimdIndex, LocalIsFlicker);
		}

		// Compute the total variation of the gradient over time.
		tsr_simd_half GradientVariation = min(abs(PrevGradient), abs(CurrentGradient)) * IsFlicker;

		// Dilates the total variation and contribution to keep stability despite inacuracies in the history reprojection
		// of these need a nearest filter which isn't precise at all.
		tsr_simd_half TotalVariationContribution = Convolve3x3HV<TAccumulatorMax<tsr_simd_half>, tsr_simd_half>(GradientVariation, tsr_simd_half::Const(1.0), GroupThreadIndex);
		tsr_simd_half TotalVariationCountContribution = Convolve3x3HV<TAccumulatorMax<tsr_simd_half>, tsr_simd_half>(IsFlicker, tsr_simd_half::Const(1.0), GroupThreadIndex);

		UNROLL_N(SIMD_SIZE)
		for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
		{
			tsr_half LocalCurrentGradient = CurrentGradient.GetElement(SimdIndex);

			tsr_half LocalPrevGradient = PrevGradient.GetElement(SimdIndex);
			tsr_half LocalPrevTotalVariation = PrevTotalVariation.GetElement(SimdIndex);
			tsr_half LocalPrevTotalVariationCount = PrevTotalVariationCount.GetElement(SimdIndex);
			tsr_half LocalIsValid = bIsValid.GetElement(SimdIndex);

			tsr_half LocalIsFlicker = IsFlicker.GetElement(SimdIndex);

			tsr_half LocalTotalVariationContribution = TotalVariationContribution.GetElement(SimdIndex);
			tsr_half LocalTotalVariationCountContribution = TotalVariationCountContribution.GetElement(SimdIndex);
			
			// Blend out previous gradient
			tsr_half LocalPrevBlendedGradient = LocalPrevGradient * (tsr_half(1.0) - BlendFinal) * (tsr_half(1.0) - LocalIsFlicker);

			// Compute new gradient.
			#if 0
				tsr_half LocalNewGradient = LocalPrevBlendedGradient + LocalCurrentGradient;
			#else
				tsr_half LocalNewGradient = abs(LocalPrevBlendedGradient) > abs(LocalCurrentGradient) ? LocalPrevBlendedGradient : LocalCurrentGradient;
			#endif
			
			// Accumulate current frame variation.
			tsr_half LocalNewTotalVariation = LocalPrevTotalVariation + LocalTotalVariationContribution;
			tsr_half LocalNewTotalVariationCount = LocalPrevTotalVariationCount + LocalTotalVariationCountContribution;

			// Discard all moire history on parallax disocclusion.
			LocalNewGradient *= LocalIsValid;
			LocalNewTotalVariation *= LocalIsValid;
			LocalNewTotalVariationCount *= LocalIsValid;

			// Quantise total variation and count to history bit depth to variation drift in the history over time.
			tsr_half LocalQuantizedNewTotalVariationCount = floor(LocalNewTotalVariationCount * (tsr_half(255.0) / MaxPrevTotalVariationCount)) * (MaxPrevTotalVariationCount / tsr_half(255.0));
			LocalNewTotalVariation *= LocalQuantizedNewTotalVariationCount * SafeRcp(LocalNewTotalVariationCount);

			// Compute the final luminance 
			#if 1
				tsr_half LocalCountFadeIn = saturate(LocalNewTotalVariationCount / TotalVariationCountThreshold - tsr_half(0.5));
			#else
				tsr_half LocalCountFadeIn = saturate(LocalNewTotalVariationCount - TotalVariationCountThreshold);
			#endif
			tsr_half LocalMoireError = (abs(LocalNewTotalVariation * SafeRcp(LocalNewTotalVariationCount)) + LocalNewTotalVariationCount * MoireEncodingError) * LocalCountFadeIn;

			FinalMoire.RegisterArray[SimdIndex][0] = FinalFlickeringHistory.GetElement(SimdIndex);
			FinalMoire.RegisterArray[SimdIndex][1] = LocalNewGradient * tsr_half(127.0 / 255.0) + tsr_half(127.0 / 255.0);
			FinalMoire.RegisterArray[SimdIndex][2] = LocalNewTotalVariation;
			FinalMoire.RegisterArray[SimdIndex][3] = LocalQuantizedNewTotalVariationCount * rcp(MaxPrevTotalVariationCount);

			MoireError.SetElement(SimdIndex, LocalMoireError);
		}
		
		// Moving object in the scene have very low chance of creating moire pattern with TAA jitter, so discard the moire error to still
		// have character animation ghost free evem as environement shadow project different things on character.
		MoireError = MoireError * bIsStatic;
	}
	#endif

	// Top secret sauce with paper and salt.
	tsr_simd_halfC ClampedInput = OriginalInput;
	tsr_simd_halfC ClampedHistory = OriginalHistory;
	#if CONFIG_FIREFLY_REMOVAL
	{
		ClampedInput   = ClampFireFliersWithGuide(OriginalInput  , /* Guide = */ OriginalHistory, bIsValid, GroupThreadIndex);
		ClampedHistory = ClampFireFliersWithGuide(OriginalHistory, /* Guide = */ OriginalInput  , bIsValid, GroupThreadIndex);
	}
	#endif

	// Filter clamped input and history to increase quantization of the rejection detection
	tsr_simd_halfC FilteredInput   = Convolve3x3HV<TAccumulatorAvg<tsr_simd_halfC>, tsr_simd_halfC>(ClampedInput  , bIsValid, GroupThreadIndex);
	tsr_simd_halfC FilteredHistory = Convolve3x3HV<TAccumulatorAvg<tsr_simd_halfC>, tsr_simd_halfC>(ClampedHistory, bIsValid, GroupThreadIndex);
	
	// Measure rejection
	tsr_simd_half Rejection;
	Rejection.SetAllElements(tsr_half(1.0));
	#if 1
	{
		const tsr_half FilteringWeight = rcp(tsr_half(1.0 + 4 * 0.5 + 4 * 0.25));

		tsr_simd_halfC BackbufferError = tsr_simd_halfC::Const(MeasureBackbufferLDRQuantizationError());

		tsr_simd_halfC FilteredBoxMin = Convolve3x3HV<TAccumulatorMin<tsr_simd_halfC>, tsr_simd_halfC>(FilteredInput, bIsValid, GroupThreadIndex) - BackbufferError;
		tsr_simd_halfC FilteredBoxMax = Convolve3x3HV<TAccumulatorMax<tsr_simd_halfC>, tsr_simd_halfC>(FilteredInput, bIsValid, GroupThreadIndex) + BackbufferError;
		
		tsr_simd_halfC FlickeringClampedFilteredHistory = clamp(FilteredHistory, FilteredBoxMin, FilteredBoxMax);

		tsr_simd_halfC ClampedFilteredHistory;
		#if CONFIG_MOIRE_DETECTION
		{
			tsr_simd_halfC MoireErrorSize;
			
			UNROLL_N(SIMD_SIZE)
			for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
			#if 0
			{
				tsr_halfC ClampedEnergy = abs(FlickeringClampedFilteredHistory.GetElement(SimdIndex) - FilteredHistory.GetElement(SimdIndex));
				tsr_halfC ClampedEnergyAmount = ClampedEnergy * SafeRcp(ClampedEnergy[0] + ClampedEnergy[1] + ClampedEnergy[2]);

				// Apply the moire error on each individual channel based on how much they need to clamp.
				MoireErrorSize.SetElement(SimdIndex, ClampedEnergyAmount * (MoireLumaToChannel * MoireError.GetElement(SimdIndex)));
			}
			#else
			{
				MoireErrorSize.SetElement(SimdIndex, MoireLumaToChannel * MoireError.GetElement(SimdIndex));
			}
			#endif

			tsr_simd_halfC StableFilteredBoxMin = min(FilteredBoxMin, FilteredBoxMax - MoireErrorSize);
			tsr_simd_halfC StableFilteredBoxMax = max(FilteredBoxMax, FilteredBoxMin + MoireErrorSize);
			
			ClampedFilteredHistory = clamp(FilteredHistory, StableFilteredBoxMin, StableFilteredBoxMax);
		}
		#else
			ClampedFilteredHistory = FlickeringClampedFilteredHistory;
		#endif
		
		tsr_simd_halfC OriginalBoxMin = Convolve3x3HV<TAccumulatorMin<tsr_simd_halfC>, tsr_simd_halfC>(OriginalInput, bIsValid, GroupThreadIndex);
		tsr_simd_halfC OriginalBoxMax = Convolve3x3HV<TAccumulatorMax<tsr_simd_halfC>, tsr_simd_halfC>(OriginalInput, bIsValid, GroupThreadIndex);
		tsr_simd_halfC BoxSize = (OriginalBoxMax - OriginalBoxMin + (BackbufferError + BackbufferError)) * FilteringWeight;
		
		UNROLL_N(SIMD_SIZE)
		for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
		{
			#if CONFIG_MOIRE_DETECTION
				tsr_halfC ClampedEnergy = abs(ClampedFilteredHistory.GetElement(SimdIndex) - FilteredHistory.GetElement(SimdIndex));
				tsr_halfC ClampedEnergyAmount = ClampedEnergy * SafeRcp(ClampedEnergy[0] + ClampedEnergy[1] + ClampedEnergy[2]);

				// Apply the moire error on each individual channel based on how much they need to clamp.
				tsr_halfC MoireErrorSize = ClampedEnergyAmount * ((FilteringWeight * tsr_half(3.0)) * MoireError.GetElement(SimdIndex));
				//tsr_halfC MoireErrorSize = FilteringWeight * 3.0 * MoireError.GetElement(SimdIndex);
			#else
				const tsr_halfC MoireErrorSize = tsr_half(0.0);
			#endif

			Rejection.SetElement(SimdIndex, MeasureRejectionFactor(
				FilteredHistory.GetElement(SimdIndex), ClampedFilteredHistory.GetElement(SimdIndex),
				FilteredInput.GetElement(SimdIndex), tsr_half(0.0), max(BoxSize.GetElement(SimdIndex), MoireErrorSize),
				MeasureBackbufferLDRQuantizationError()));
		}
		
		Rejection = saturate(Rejection + tsr_simd_half::Const(1.0) - bIsValid);
	}
	#endif
	
	// Update the guide for next frame.
	tsr_simd_halfC FinalGuide;
	{
		const tsr_half CurrentFrameSampleCount = tsr_half(1.0);
		const tsr_half PrevLowFrequencySampleCount = tsr_half(8.0);
		const tsr_half TheoricBlendFactor = CurrentFrameSampleCount / (CurrentFrameSampleCount + PrevLowFrequencySampleCount);
		
		tsr_simd_half BlendFinal;
		// Completely discard the history
		UNROLL_N(SIMD_SIZE)
		for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
		{
			bool bIsOffScreen = false;
			bool bIsDisoccluded = bIsValid.GetElement(SimdIndex) == tsr_half(0.0);
			tsr_half LocalRejection = Rejection.GetElement(SimdIndex);

			tsr_half TotalBlend = select(or(bIsOffScreen, bIsDisoccluded), tsr_half(1.0), saturate(tsr_half(1.0) - LocalRejection * tsr_half(4.0)));
			tsr_half RejectedBlendFactor = max(TheoricBlendFactor, tsr_half(1.0) - LocalRejection);


			BlendFinal.SetElement(SimdIndex, max(RejectedBlendFactor, TotalBlend));
		}
		
		FinalGuide = OriginalInput * tsr_simd_halfC::Vectorize(BlendFinal) - OriginalHistory * tsr_simd_halfC::Vectorize(BlendFinal - 1.0);
	}

	// Mark the top left corner of the tile for debugging purposes.
	#if DEBUG_OUTPUT
	if (GroupThreadIndex == 0)
	{
		UNROLL_N(DEBUG_ARRAY_SIZE)
		for (uint DebugId = 0; DebugId < DEBUG_ARRAY_SIZE; DebugId++)
		{
			Debug[DebugId].SetElement(/* SimdIndex = */ 0, 1.0);
		}
	}
	#endif

	// Output data.
	ISOLATE
	{
		UNROLL_N(SIMD_SIZE)
		for (uint SimdIndex = 0; SimdIndex < SIMD_SIZE; SimdIndex++)
		{
			tsr_short2 LaneSimdPixelOffset = GetLaneSimdPixelOffset(LaneIndex, SimdIndex);
			bool bIsNonOverscanPixel = all(and(LaneSimdPixelOffset >= TILE_OVERSCAN_PADDING, LaneSimdPixelOffset < TILE_SIZE + TILE_OVERSCAN_PADDING));

			tsr_short2 OutputPixelPos = InvalidateOutputPixelPos(GroupPixelOffset + LaneSimdPixelOffset, InputInfo_ViewportMax);
			OutputPixelPos.x = select(bIsNonOverscanPixel, OutputPixelPos.x, ~tsr_short(0));
		
			tsr_half LocalRejection = Rejection.GetElement(SimdIndex);
			tsr_halfC FinalGuideColor = FinalGuide.GetElement(SimdIndex);
			
			LocalRejection = LocalRejection - 0.5 * rcp(tsr_half(256.0));
			#if CONFIG_ENABLE_STOCASTIC_QUANTIZATION
			{
				uint2 Random = Rand3DPCG16(int3(LaneSimdPixelOffset, View.StateFrameIndexMod8)).xy;
				tsr_half E = tsr_half(Hammersley16(0, 1, Random).x);
		
				FinalGuideColor.rgb = QuantizeForUNormRenderTarget(FinalGuideColor.rgb, E.x, HistoryGuideQuantizationError);
			}
			#endif

			HistoryGuideOutput[OutputPixelPos] = FinalGuideColor;
			#if CONFIG_MOIRE_DETECTION
				HistoryMoireOutput[OutputPixelPos] = FinalMoire.GetElement(SimdIndex);
			#endif
			HistoryRejectionOutput[OutputPixelPos] = LocalRejection;
			InputSceneColorLdrLumaOutput[OutputPixelPos] = CenterLumaLDR.GetElement(SimdIndex);
			
			#if DEBUG_OUTPUT
			UNROLL_N(DEBUG_ARRAY_SIZE)
			for (uint DebugId = 0; DebugId < DEBUG_ARRAY_SIZE; DebugId++)
			{
				DebugOutput[tsr_short3(OutputPixelPos, DebugId)] = float4(Debug[DebugId].GetElement(SimdIndex), 0.0);
			}
			#endif
		}
	}
}
