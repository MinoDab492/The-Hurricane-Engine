// Copyright Epic Games, Inc. All Rights Reserved.

#include "TSRCommon.ush"


//------------------------------------------------------- CONFIG

#define TILE_SIZE 8



//------------------------------------------------------- PARAMETERS

uint4 HistoryRejectionViewport;

Texture2D<tsr_half> HistoryRejectionTexture;
RWTexture2D<tsr_half> DilatedHistoryRejectionOutput;


//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_SIZE * TILE_SIZE, 1, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	float4 Debug = 0.0;
	
	tsr_short2 RejectionPixelPos = (
		tsr_short2(HistoryRejectionViewport.xy) +
		tsr_short2(GroupId) * tsr_short2(TILE_SIZE, TILE_SIZE) +
		Map8x8Tile2x2Lane(GroupThreadIndex));

	// Fetch center of the kernel
	tsr_half HistoryRejectionInfo = HistoryRejectionTexture[RejectionPixelPos];

	const int KernelSize = 1;

	// Fetch neighborhood of the kernel
	UNROLL
	for (int x = -KernelSize; x <= KernelSize; x++)
	{
		UNROLL
		for (int y = -KernelSize; y <= KernelSize; y++)
		{
			tsr_short2 Offset = tsr_short2(x, y);
		
			if (all(Offset == 0))
			{
				continue;
			}
			
			tsr_short2 SampleInputPixelPos = RejectionPixelPos + ClampPixelOffset(
				RejectionPixelPos,
				Offset, Offset,
				HistoryRejectionViewport.xy, HistoryRejectionViewport.zw - 1);

			tsr_half SampleRejectionInfo = HistoryRejectionTexture[SampleInputPixelPos];

			HistoryRejectionInfo = min(HistoryRejectionInfo, SampleRejectionInfo);
		}
	}
	
	bool bIsValid = all(RejectionPixelPos < tsr_short2(HistoryRejectionViewport.zw));
	RejectionPixelPos.x = bIsValid ? RejectionPixelPos.x : ~tsr_ushort(0);

	DilatedHistoryRejectionOutput[RejectionPixelPos] = HistoryRejectionInfo;

	#if DEBUG_OUTPUT
	{
		DebugOutput[tsr_short3(RejectionPixelPos, 0)] = Debug;
	}
	#endif
}
